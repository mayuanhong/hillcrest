/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'jma' at '3/22/16 3:39 PM' with Gradle 2.9
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.9/userguide/tutorial_java_projects.html
 */


/*
 buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE")
    }
}
*/

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply Eclipse Project plugin
apply plugin: 'eclipse'

/*
jar {
	baseName = 'gs-accessing-data-jpa'
	version =  '0.1.0'
    
	baseName = 'gs-actuator-service'
	version =  '0.1.0'
}
*/

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.13'
    // Spring Boot
    compile("org.springframework.boot:spring-boot-starter-web:1.3.3.RELEASE")
    //compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-security:1.3.3.RELEASE")
    //compile("org.springframework.boot:spring-boot-starter-data-jpa")

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
	testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile 'junit:junit:4.12'
}
